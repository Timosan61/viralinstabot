# üê≥ Docker Compose Production Template
#
# –ó–∞–º–µ–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è:
# - YOUR_PROJECT_NAME: –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
# - YOUR_IMAGE_NAME: –Ω–∞–∑–≤–∞–Ω–∏–µ Docker –æ–±—Ä–∞–∑–∞
# - YOUR_HEALTH_CHECK: –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è
# - YOUR_PORT: –ø–æ—Ä—Ç –≤–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
#
# –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∫–∞–∫: docker-compose.prod.yml

version: '3.8'

services:
  # === –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ===
  app:
    build: .
    container_name: YOUR_PROJECT_NAME-prod
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - ENV=production
      - DEBUG=false
    volumes:
      # –ü–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      - ./data:/app/data
      - ./logs:/app/logs
      - ./uploads:/app/uploads
      # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (—Ç–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ)
      - ./config:/app/config:ro
    networks:
      - app-network
    ports:
      - "YOUR_PORT:YOUR_PORT"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –ø–æ—Ä—Ç
    depends_on:
      - database  # –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      # - redis   # –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ Redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:YOUR_PORT/health"]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à—É –ø—Ä–æ–≤–µ—Ä–∫—É
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # === –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö PostgreSQL (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ) ===
  # database:
  #   image: postgres:15-alpine
  #   container_name: YOUR_PROJECT_NAME-db
  #   restart: unless-stopped
  #   environment:
  #     - POSTGRES_DB=${DB_NAME:-myapp}
  #     - POSTGRES_USER=${DB_USER:-postgres}
  #     - POSTGRES_PASSWORD=${DB_PASSWORD:-password}
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #     - ./db/init:/docker-entrypoint-initdb.d:ro
  #   networks:
  #     - app-network
  #   ports:
  #     - "5432:5432"
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres}"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5

  # === MySQL –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ PostgreSQL) ===
  # database:
  #   image: mysql:8.0
  #   container_name: YOUR_PROJECT_NAME-db
  #   restart: unless-stopped
  #   environment:
  #     - MYSQL_ROOT_PASSWORD=${DB_ROOT_PASSWORD:-rootpassword}
  #     - MYSQL_DATABASE=${DB_NAME:-myapp}
  #     - MYSQL_USER=${DB_USER:-user}
  #     - MYSQL_PASSWORD=${DB_PASSWORD:-password}
  #   volumes:
  #     - mysql_data:/var/lib/mysql
  #   networks:
  #     - app-network
  #   ports:
  #     - "3306:3306"
  #   healthcheck:
  #     test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5

  # === Redis Cache (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ) ===
  # redis:
  #   image: redis:7-alpine
  #   container_name: YOUR_PROJECT_NAME-redis
  #   restart: unless-stopped
  #   command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redispassword}
  #   volumes:
  #     - redis_data:/data
  #   networks:
  #     - app-network
  #   ports:
  #     - "6379:6379"
  #   healthcheck:
  #     test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
  #     interval: 10s
  #     timeout: 3s
  #     retries: 5

  # === Nginx Reverse Proxy (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ) ===
  # nginx:
  #   image: nginx:alpine
  #   container_name: YOUR_PROJECT_NAME-nginx
  #   restart: unless-stopped
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
  #     - ./nginx/ssl:/etc/ssl/certs:ro
  #     - ./nginx/logs:/var/log/nginx
  #   networks:
  #     - app-network
  #   depends_on:
  #     - app
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost/health"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3

  # === –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: Prometheus ===
  prometheus:
    image: prom/prometheus:latest
    container_name: YOUR_PROJECT_NAME-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - app-network

  # === –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: Grafana ===
  grafana:
    image: grafana/grafana:latest
    container_name: YOUR_PROJECT_NAME-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    networks:
      - app-network
    depends_on:
      - prometheus

  # === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ: Loki ===
  loki:
    image: grafana/loki:latest
    container_name: YOUR_PROJECT_NAME-loki
    restart: unless-stopped
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki-config.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - app-network

  # === –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: Watchtower (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ) ===
  # watchtower:
  #   image: containrrr/watchtower:latest
  #   container_name: YOUR_PROJECT_NAME-watchtower
  #   restart: unless-stopped
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  #   environment:
  #     - WATCHTOWER_CLEANUP=true
  #     - WATCHTOWER_SCHEDULE=0 0 2 * * *  # Daily at 2 AM
  #     - WATCHTOWER_NOTIFICATIONS=email
  #     - WATCHTOWER_NOTIFICATION_EMAIL_FROM=${EMAIL_FROM}
  #     - WATCHTOWER_NOTIFICATION_EMAIL_TO=${EMAIL_TO}
  #     - WATCHTOWER_NOTIFICATION_EMAIL_SERVER=${SMTP_SERVER}
  #     - WATCHTOWER_NOTIFICATION_EMAIL_SERVER_PORT=${SMTP_PORT:-587}
  #     - WATCHTOWER_NOTIFICATION_EMAIL_SERVER_USER=${SMTP_USER}
  #     - WATCHTOWER_NOTIFICATION_EMAIL_SERVER_PASSWORD=${SMTP_PASSWORD}
  #   command: --interval 3600 YOUR_PROJECT_NAME-prod

# === –°–µ—Ç–∏ ===
networks:
  app-network:
    driver: bridge
    name: YOUR_PROJECT_NAME-network

# === –ü–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–µ —Ç–æ–º–∞ ===
volumes:
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local
  # postgres_data:  # –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ PostgreSQL
  #   driver: local
  # mysql_data:     # –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ MySQL
  #   driver: local
  # redis_data:     # –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ Redis
  #   driver: local
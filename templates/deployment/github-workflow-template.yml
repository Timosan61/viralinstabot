# üöÄ GitHub Actions Workflow Template –¥–ª—è –∞–≤—Ç–æ–¥–µ–ø–ª–æ—è
# 
# –ó–∞–º–µ–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —ç—Ç–æ–º —Ñ–∞–π–ª–µ:
# - YOUR_PROJECT_NAME: –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
# - YOUR_APP_DIR: –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
# - your-test-command: –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
# - your-lint-command: –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ª–∏–Ω—Ç–∏–Ω–≥–∞
# - your-deploy-commands: –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –¥–µ–ø–ª–æ—è
#
# –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∫–∞–∫: .github/workflows/deploy.yml

name: Deploy YOUR_PROJECT_NAME to Server

permissions:
  contents: read

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

env:
  SERVER_HOST: ${{ secrets.SERVER_HOST }}
  SERVER_USER: ${{ secrets.SERVER_USER }}
  APP_DIR: "YOUR_APP_DIR"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –ø—É—Ç—å –∫ –≤–∞—à–µ–º—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é

jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
    - uses: actions/checkout@v4
    
    # === Python –ø—Ä–æ–µ–∫—Ç ===
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run Python tests
      run: |
        python -m pytest tests/ -v || echo "No tests found, skipping..."
    
    - name: Run Python linting
      run: |
        python -m flake8 src/ || echo "Linting completed with warnings"

    # === Node.js –ø—Ä–æ–µ–∫—Ç (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ) ===
    # - name: Set up Node.js
    #   uses: actions/setup-node@v4
    #   with:
    #     node-version: '18'
    #     cache: 'npm'
    #
    # - name: Install Node.js dependencies
    #   run: npm ci
    #
    # - name: Run Node.js tests
    #   run: npm test
    #
    # - name: Run Node.js linting
    #   run: npm run lint

    # === Go –ø—Ä–æ–µ–∫—Ç (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ) ===
    # - name: Set up Go
    #   uses: actions/setup-go@v4
    #   with:
    #     go-version: '1.21'
    #
    # - name: Run Go tests
    #   run: go test ./...
    #
    # - name: Build Go binary
    #   run: go build -o main .

  deploy:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SERVER_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ env.SERVER_HOST }} >> ~/.ssh/known_hosts 2>/dev/null || true
        
    - name: Test SSH Connection
      run: |
        echo "Testing SSH connection to ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }}"
        ssh -o ConnectTimeout=10 -o StrictHostKeyChecking=no ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} "echo 'SSH connection successful' && whoami && pwd" || exit 1
    
    - name: Deploy Application
      run: |
        ssh ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} << 'ENDSSH'
          set -e
          
          # Colors for output
          GREEN='\033[0;32m'
          YELLOW='\033[1;33m'
          RED='\033[0;31m'
          NC='\033[0m'
          
          echo -e "${GREEN}üöÄ Starting deployment...${NC}"
          
          # Navigate to app directory
          cd ${{ env.APP_DIR }}
          
          # Create backup
          echo -e "${YELLOW}Creating backup...${NC}"
          BACKUP_DIR="backup/deployment.$(date +%Y%m%d_%H%M%S)"
          mkdir -p backup
          
          # Pull latest changes
          echo -e "${YELLOW}Pulling latest changes...${NC}"
          git fetch origin
          git reset --hard origin/main
          
          # === Docker Deployment ===
          echo -e "${YELLOW}Deploying with Docker...${NC}"
          
          # Stop current containers
          docker-compose -f docker-compose.prod.yml down || true
          
          # Build new image
          docker-compose -f docker-compose.prod.yml build --no-cache
          
          # Start containers
          docker-compose -f docker-compose.prod.yml up -d
          
          # Wait for containers to start
          echo -e "${YELLOW}Waiting for containers to start...${NC}"
          sleep 30
          
          # Check container status
          echo -e "${YELLOW}Checking deployment status...${NC}"
          docker-compose -f docker-compose.prod.yml ps
          
          # === Systemd Deployment (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ Docker) ===
          # echo -e "${YELLOW}Restarting systemd service...${NC}"
          # sudo systemctl restart YOUR_PROJECT_NAME.service
          # sudo systemctl status YOUR_PROJECT_NAME.service
          
          # === Manual Deployment (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ Docker/Systemd) ===
          # echo -e "${YELLOW}Installing dependencies...${NC}"
          # pip install -r requirements.txt
          # 
          # echo -e "${YELLOW}Restarting application...${NC}"
          # pkill -f "python -m src.main" || true
          # nohup python -m src.main > app.log 2>&1 &
          
          echo -e "${GREEN}‚úÖ Deployment completed successfully!${NC}"
        ENDSSH
    
    - name: Health Check
      run: |
        ssh ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} << 'ENDSSH'
          cd ${{ env.APP_DIR }}
          
          echo "üè• Running health checks..."
          
          # === Docker Health Check ===
          if docker-compose -f docker-compose.prod.yml ps | grep -q "Up"; then
            echo "‚úÖ Health check passed - Application is running"
          else
            echo "‚ùå Health check failed - Application is not running"
            docker-compose -f docker-compose.prod.yml logs --tail=20
            exit 1
          fi
          
          # === Custom Health Check (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ) ===
          # if curl -f http://localhost:8080/health >/dev/null 2>&1; then
          #   echo "‚úÖ Health check passed - HTTP endpoint is responding"
          # else
          #   echo "‚ùå Health check failed - HTTP endpoint is not responding"
          #   exit 1
          # fi
          
          echo "üìä Final status:"
          docker-compose -f docker-compose.prod.yml ps || systemctl status YOUR_PROJECT_NAME.service || ps aux | grep YOUR_PROJECT_NAME
        ENDSSH
    
    - name: Cleanup old backups
      run: |
        ssh ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} << 'ENDSSH'
          cd ${{ env.APP_DIR }}
          
          # Keep only last 5 deployment backups
          find backup/ -name "deployment.*" -type d 2>/dev/null | sort -r | tail -n +6 | xargs -r rm -rf
          echo "‚úÖ Old deployment backups cleaned up"
        ENDSSH

  notify:
    needs: [deploy]
    runs-on: ubuntu-latest
    permissions:
      contents: read
    if: always()
    
    steps:
    - name: Notify deployment result
      run: |
        if [ "${{ needs.deploy.result }}" == "success" ]; then
          echo "‚úÖ Deployment to server successful!"
        else
          echo "‚ùå Deployment to server failed!"
        fi
    
    # === Slack —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ) ===
    # - name: Slack Notification
    #   uses: 8398a7/action-slack@v3
    #   with:
    #     status: ${{ job.status }}
    #     webhook_url: ${{ secrets.SLACK_WEBHOOK }}
    #   if: always()
    
    # === Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ) ===
    # - name: Email Notification
    #   uses: dawidd6/action-send-mail@v3
    #   with:
    #     server_address: smtp.gmail.com
    #     server_port: 587
    #     username: ${{ secrets.EMAIL_USERNAME }}
    #     password: ${{ secrets.EMAIL_PASSWORD }}
    #     subject: "Deployment ${{ job.status }}: YOUR_PROJECT_NAME"
    #     body: "Deployment completed with status: ${{ job.status }}"
    #     to: admin@company.com
    #   if: failure()
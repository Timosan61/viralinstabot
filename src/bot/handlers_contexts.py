"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
"""

import logging
from typing import Optional
from datetime import datetime

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest

from src.bot.states import ContextManagementStates
from src.bot.keyboards import (
    get_contexts_main_keyboard,
    get_contexts_list_keyboard,
    get_context_view_keyboard,
    get_context_delete_keyboard,
    get_context_edit_keyboard,
    get_context_edit_cancel_keyboard,
    get_back_to_main_keyboard
)
from src.features.user_context import get_context_manager
from src.storage.sqlite import db
from src.utils.logger import get_logger

logger = get_logger(__name__)
router = Router(name="contexts")


@router.callback_query(F.data == "contexts:main")
async def show_contexts_main_menu(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º–∏."""
    try:
        await state.clear()
        
        text = """üìã –£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–û–ù–¢–ï–ö–°–¢–ê–ú–ò

–ö–æ–Ω—Ç–µ–∫—Å—Ç—ã –ø–æ–º–æ–≥–∞—é—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –¥–ª—è –≤–∞—à–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤.

–ü—Ä–∏–º–µ—Ä—ã –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤:
‚Ä¢ üè¢ –ë–∏–∑–Ω–µ—Å-–ø—Ä–æ–µ–∫—Ç (—Ç–æ–≤–∞—Ä—ã, —É—Å–ª—É–≥–∏)
‚Ä¢ üë§ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –±–ª–æ–≥ (—Ö–æ–±–±–∏, –∂–∏–∑–Ω—å)
‚Ä¢ üé® –¢–≤–æ—Ä—á–µ—Å–∫–∏–π –ø—Ä–æ–µ–∫—Ç (–∏—Å–∫—É—Å—Å—Ç–≤–æ, –¥–∏–∑–∞–π–Ω)
‚Ä¢ üìö –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"""

        await callback.message.edit_text(
            text,
            reply_markup=get_contexts_main_keyboard()
        )
        
    except Exception as e:
        logger.error(f"Error in show_contexts_main_menu: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "contexts:list")
async def show_contexts_list(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        user = await db.get_or_create_user(callback.from_user.id)
        context_manager = get_context_manager()
        
        if not context_manager:
            await callback.answer("–°–µ—Ä–≤–∏—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        contexts = await context_manager.get_user_contexts(user.id)
        
        if not contexts:
            text = """üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤

üí° –°–æ–∑–¥–∞–π—Ç–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –¥–ª—è –≤–∞—à–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤, —Ç–æ–≤–∞—Ä–æ–≤ –∏–ª–∏ —Ç–µ–º–∞—Ç–∏–∫."""
            
            await callback.message.edit_text(
                text,
                reply_markup=get_contexts_main_keyboard()
            )
            return
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        contexts_data = []
        for context in contexts:
            contexts_data.append({
                'id': context.id,
                'name': context.name,
                'description': context.description
            })
        
        text = f"üìã –í–∞—à–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã ({len(contexts)} —à—Ç.)\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:"
        
        await callback.message.edit_text(
            text,
            reply_markup=get_contexts_list_keyboard(contexts_data)
        )
        
        await state.set_state(ContextManagementStates.viewing_contexts)
        
    except Exception as e:
        logger.error(f"Error in show_contexts_list: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤", show_alert=True)


@router.callback_query(F.data.startswith("context:view:"))
async def view_context(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞."""
    try:
        context_id = int(callback.data.split(":")[2])
        user = await db.get_or_create_user(callback.from_user.id)
        context_manager = get_context_manager()
        
        if not context_manager:
            await callback.answer("–°–µ—Ä–≤–∏—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context = await context_manager.get_context_by_id(user.id, context_id)
        
        if not context:
            await callback.answer("–ö–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        text = context_manager.format_context_details(context)
        
        await callback.message.edit_text(
            text,
            reply_markup=get_context_view_keyboard(context_id)
        )
        
    except Exception as e:
        logger.error(f"Error in view_context: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "contexts:create")
async def start_context_creation(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞."""
    try:
        text = """‚ûï –°–û–ó–î–ê–ù–ò–ï –ù–û–í–û–ì–û –ö–û–ù–¢–ï–ö–°–¢–ê

–®–∞–≥ 1/3: –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞

–ü—Ä–∏–º–µ—Ä—ã:
‚Ä¢ "–§–∏—Ç–Ω–µ—Å-–±–ª–æ–≥"
‚Ä¢ "–ö–æ—Ñ–µ–π–Ω—è –≤ —Ü–µ–Ω—Ç—Ä–µ"
‚Ä¢ "–ö—É—Ä—Å—ã –ø–æ –¥–∏–∑–∞–π–Ω—É"
‚Ä¢ "–õ–∏—á–Ω—ã–π —Å—Ç–∏–ª—å"

–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤):"""

        await callback.message.edit_text(
            text,
            reply_markup=get_context_edit_cancel_keyboard(0)
        )
        
        await state.set_state(ContextManagementStates.creating_name)
        
    except Exception as e:
        logger.error(f"Error in start_context_creation: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.message(ContextManagementStates.creating_name)
async def handle_context_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞."""
    try:
        name = message.text.strip()
        
        if len(name) > 50:
            await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤.")
            return
        
        if len(name) < 3:
            await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ú–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞.")
            return
        
        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ
        await state.update_data(context_name=name)
        
        text = f"""‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: "{name}"

–®–∞–≥ 2/3: –í–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞

–û–ø–∏—à–∏—Ç–µ –≤ 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö, –¥–ª—è —á–µ–≥–æ —ç—Ç–æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç (–¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤):

–ü—Ä–∏–º–µ—Ä—ã:
‚Ä¢ "–§–∏—Ç–Ω–µ—Å-–∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∂–µ–Ω—â–∏–Ω 25-35 –ª–µ—Ç, –º–æ—Ç–∏–≤–∞—Ü–∏—è –∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"
‚Ä¢ "–°–µ–º–µ–π–Ω–∞—è –∫–æ—Ñ–µ–π–Ω—è, —É—é—Ç–Ω–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞ –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ—Ñ–µ"
‚Ä¢ "–û–Ω–ª–∞–π–Ω-–∫—É—Ä—Å—ã UI/UX –¥–∏–∑–∞–π–Ω–∞ –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö"

–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:"""

        await message.answer(text)
        await state.set_state(ContextManagementStates.creating_description)
        
    except Exception as e:
        logger.error(f"Error in handle_context_name: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è")


@router.message(ContextManagementStates.creating_description)
async def handle_context_description(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞."""
    try:
        description = message.text.strip()
        
        if len(description) > 200:
            await message.answer("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤.")
            return
        
        if len(description) < 10:
            await message.answer("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ú–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤.")
            return
        
        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ
        await state.update_data(context_description=description)
        
        text = f"""‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ

–®–∞–≥ 3/3: –í–≤–µ–¥–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞

–û–ø–∏—à–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ:
‚Ä¢ –í–∞—à–∞ –Ω–∏—à–∞/—Å—Ñ–µ—Ä–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
‚Ä¢ –¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è
‚Ä¢ –í–∞—à–∏ —Ü–µ–ª–∏ –∏ –∑–∞–¥–∞—á–∏
‚Ä¢ –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
‚Ä¢ –°—Ç–∏–ª—å –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏
‚Ä¢ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã

–ß–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ–ø–∏—à–µ—Ç–µ - —Ç–µ–º –ª—É—á—à–µ –±—É–¥—É—Ç —Å—Ü–µ–Ω–∞—Ä–∏–∏!

–í–≤–µ–¥–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:"""

        await message.answer(text)
        await state.set_state(ContextManagementStates.creating_data)
        
    except Exception as e:
        logger.error(f"Error in handle_context_description: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è")


@router.message(ContextManagementStates.creating_data)
async def handle_context_data(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞."""
    try:
        context_data = message.text.strip()
        
        if len(context_data) > 2000:
            await message.answer("‚ùå –î–∞–Ω–Ω—ã–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ. –ú–∞–∫—Å–∏–º—É–º 2000 —Å–∏–º–≤–æ–ª–æ–≤.")
            return
        
        if len(context_data) < 50:
            await message.answer("‚ùå –î–∞–Ω–Ω—ã–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ. –ú–∏–Ω–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.")
            return
        
        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
        await state.update_data(context_data=context_data)
        
        # –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        data = await state.get_data()
        name = data.get('context_name')
        description = data.get('context_description')
        
        text = f"""üìã –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–´–ô –ü–†–û–°–ú–û–¢–† –ö–û–ù–¢–ï–ö–°–¢–ê

üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {name}

üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {description}

üíº –î–∞–Ω–Ω—ã–µ: {context_data[:300]}{'...' if len(context_data) > 300 else ''}

‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç?"""

        await message.answer(
            text,
            reply_markup=get_context_view_keyboard(0)  # –í—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º 0
        )
        
        await state.set_state(ContextManagementStates.confirming_creation)
        
    except Exception as e:
        logger.error(f"Error in handle_context_data: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")


@router.callback_query(F.data.startswith("context:delete:"))
async def confirm_context_deletion(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞."""
    try:
        context_id = int(callback.data.split(":")[2])
        user = await db.get_or_create_user(callback.from_user.id)
        context_manager = get_context_manager()
        
        if not context_manager:
            await callback.answer("–°–µ—Ä–≤–∏—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è
        context = await context_manager.get_context_by_id(user.id, context_id)
        
        if not context:
            await callback.answer("–ö–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        text = f"""üóë –£–î–ê–õ–ï–ù–ò–ï –ö–û–ù–¢–ï–ö–°–¢–ê

–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç:
"{context.name}"?

‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!"""

        await callback.message.edit_text(
            text,
            reply_markup=get_context_delete_keyboard(context_id)
        )
        
    except Exception as e:
        logger.error(f"Error in confirm_context_deletion: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("context:delete_confirm:"))
async def delete_context(callback: CallbackQuery, state: FSMContext):
    """–£–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç."""
    try:
        context_id = int(callback.data.split(":")[2])
        user = await db.get_or_create_user(callback.from_user.id)
        context_manager = get_context_manager()
        
        if not context_manager:
            await callback.answer("–°–µ—Ä–≤–∏—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
            return
        
        # –£–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç
        deleted = await context_manager.delete_context(user.id, context_id)
        
        if deleted:
            await callback.answer("‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç —É–¥–∞–ª–µ–Ω", show_alert=True)
            
            # –ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–ø–∏—Å–∫—É –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤
            await show_contexts_list(callback, state)
        else:
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç", show_alert=True)
        
    except Exception as e:
        logger.error(f"Error in delete_context: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏", show_alert=True)


@router.callback_query(F.data.startswith("context:download:"))
async def download_context_as_text(callback: CallbackQuery, state: FSMContext):
    """–°–∫–∞—á–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫–∞–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª."""
    try:
        context_id = int(callback.data.split(":")[2])
        user = await db.get_or_create_user(callback.from_user.id)
        context_manager = get_context_manager()
        
        if not context_manager:
            await callback.answer("–°–µ—Ä–≤–∏—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context = await context_manager.get_context_by_id(user.id, context_id)
        
        if not context:
            await callback.answer("–ö–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç
        context_data = {
            'id': context.id,
            'name': context.name,
            'description': context.description,
            'context_data': context.context_data,
            'created_at': context.created_at,
            'updated_at': context.updated_at
        }
        
        # Generate simple text report
        report_text = f"""
üìã –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {context.name}
üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {context.description or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}

üíæ –î–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:
{context.context_data}

üìÖ –°–æ–∑–¥–∞–Ω: {context.created_at}
üìÖ –û–±–Ω–æ–≤–ª–µ–Ω: {context.updated_at}
"""
        
        # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
        from io import BytesIO
        
        file_content = report_text.encode('utf-8')
        file_name = f"context_{context.name}_{context.id}.txt"
        
        # –û—á–∏—Å—Ç–∏—Ç—å –∏–º—è —Ñ–∞–π–ª–∞ –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        import re
        file_name = re.sub(r'[<>:"/\\|?*]', '_', file_name)
        
        file_obj = BytesIO(file_content)
        file_obj.name = file_name
        
        await callback.message.answer_document(
            document=file_obj,
            caption=f"üìÑ –ö–æ–Ω—Ç–µ–∫—Å—Ç: {context.name}"
        )
        
        await callback.answer("‚úÖ –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        
    except Exception as e:
        logger.error(f"Error in download_context_as_text: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞", show_alert=True)


@router.callback_query(F.data == "contexts:refresh")
async def refresh_contexts_list(callback: CallbackQuery, state: FSMContext):
    """–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤."""
    await show_contexts_list(callback, state)
"""Keyboards for the updated bot interface."""

from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton
)


# Main menu keyboard
def get_main_menu_keyboard():
    """Returns the main menu keyboard."""
    buttons = [
        [InlineKeyboardButton(text="üìä –ê–Ω–∞–ª–∏–∑ –ø–æ @–∞–∫–∫–∞—É–Ω—Ç—É", callback_data="type:account")],
        [InlineKeyboardButton(text="#Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑ –ø–æ #—Ö—ç—à—Ç–µ–≥—É", callback_data="type:hashtag")],
        [InlineKeyboardButton(text="üìç –ê–Ω–∞–ª–∏–∑ –ø–æ –ª–æ–∫–∞—ÜÔøΩÔøΩ–∏", callback_data="type:location")],
        [InlineKeyboardButton(text="üîó –ê–Ω–∞–ª–∏–∑ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∞ Reel", callback_data="type:reel_url")],
        [InlineKeyboardButton(text="üî¨ –ê–Ω–∞–ª–∏–∑ —Å AI Vision", callback_data="vision_analysis")],
        [InlineKeyboardButton(text="üìã –ú–æ–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã", callback_data="contexts:main")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


# Period selection keyboard
def get_period_keyboard() -> InlineKeyboardMarkup:
    """Get period selection keyboard."""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="3 –¥–Ω—è", callback_data="period:3"),
                InlineKeyboardButton(text="7 –¥–Ω–µ–π", callback_data="period:7"),
                InlineKeyboardButton(text="14 –¥–Ω–µ–π", callback_data="period:14")
            ],
            [
                InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
            ]
        ]
    )
    return keyboard


# Sample size keyboard
def get_sample_size_keyboard() -> InlineKeyboardMarkup:
    """Get sample size selection keyboard."""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="5 Reels", callback_data="sample:5"),
                InlineKeyboardButton(text="7 Reels", callback_data="sample:7"),
                InlineKeyboardButton(text="10 Reels", callback_data="sample:10")
            ],
            [
                InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_period")
            ]
        ]
    )
    return keyboard


# Confirmation keyboard
def get_confirmation_keyboard(price_rub: float) -> InlineKeyboardMarkup:
    """Get analysis confirmation keyboard with price."""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ({price_rub:.0f} ‚ÇΩ)",
                    callback_data="confirm_analysis"
                )
            ],
            [
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_analysis")
            ]
        ]
    )
    return keyboard


# Back to main menu button
def get_back_to_main_keyboard() -> InlineKeyboardMarkup:
    """Get back to main menu button."""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚Ü©Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            ]
        ]
    )
    return keyboard


# New analysis button
def get_new_analysis_keyboard() -> InlineKeyboardMarkup:
    """Get new analysis button."""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üìä –ù–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑", callback_data="new_analysis")
            ]
        ]
    )
    return keyboard


# Cancel button (for any stage)
def get_cancel_keyboard() -> InlineKeyboardMarkup:
    """Get cancel button."""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_analysis")
            ]
        ]
    )
    return keyboard


# Export formats keyboard
def get_export_keyboard() -> InlineKeyboardMarkup:
    """Get export formats keyboard."""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üìã JSON", callback_data="export_json")
            ],
            [
                InlineKeyboardButton(text="üìä –ù–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑", callback_data="new_analysis")
            ]
        ]
    )
    return keyboard


# Analytics message keyboard with export and scenario options
def get_analytics_keyboard(has_pdf: bool = True) -> InlineKeyboardMarkup:
    """Get analytics message keyboard."""
    buttons = []
    
    # First row - export button
    buttons.append([
        InlineKeyboardButton(text="üìã JSON", callback_data="export_json")
    ])
    
    # Second row - PDF if available
    if has_pdf:
        buttons.append([
            InlineKeyboardButton(text="üìë –°–∫–∞—á–∞—Ç—å PDF –æ—Ç—á–µ—Ç", callback_data="download_pdf")
        ])
    
    # Third row - new analysis
    buttons.append([
        InlineKeyboardButton(text="üìä –ù–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑", callback_data="new_analysis")
    ])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard


# Scenario button for individual reels
def get_scenario_keyboard(reel_id: str) -> InlineKeyboardMarkup:
    """Get scenario button for a reel."""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚úçÔ∏è –°—Ü–µ–Ω–∞—Ä–∏–π",
                    callback_data=f"scenario:{reel_id}"
                )
            ]
        ]
    )
    return keyboard


# Analysis type messages
ANALYSIS_TYPE_MESSAGES = {
    "@–∞–∫–∫–∞—É–Ω—Ç": """üîç @–∞–∫–∫–∞—É–Ω—Ç

–í–≤–µ–¥–∏—Ç–µ username –±–µ–∑ @
–ü—Ä–∏–º–µ—Ä: nadinka.one

‚ö†Ô∏è –í–≤–æ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ –û–î–ò–ù –∞–∫–∫–∞—É–Ω—Ç –∑–∞ —Ä–∞–∑.
–ï—Å–ª–∏ –Ω—É–∂–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ ‚Äî –¥–µ–ª–∞–π—Ç–µ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã.""",
    
    "#—Ö—ç—à—Ç–µ–≥": """üè∑ #—Ö—ç—à—Ç–µ–≥

–í–≤–µ–¥–∏—Ç–µ —Ö—ç—à—Ç–µ–≥ –±–µ–∑ #
–ü—Ä–∏–º–µ—Ä: –¥–∏–∑–∞–π–Ω—á–µ–ª–æ–≤–µ–∫–∞

‚ö†Ô∏è –¢–æ–ª—å–∫–æ –û–î–ò–ù —Ö—ç—à—Ç–µ–≥ –∑–∞ –∑–∞–ø—Ä–æ—Å.
–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ ‚Äî –∑–∞–ø—É—Å–∫–∞–π—Ç–µ –ø–æ–æ—á–µ—Ä—ë–¥–Ω–æ.""",
    
    "üìç–ª–æ–∫–∞—Ü–∏—è": """üìç –õ–æ–∫–∞—Ü–∏—è

–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞ –∏–ª–∏ –≥–æ—Ä–æ–¥–∞
–ü—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞ –∏–ª–∏ Sochi Park

‚ö†Ô∏è –ï—Å–ª–∏ –≥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî –±–æ—Ç —Å–æ–æ–±—â–∏—Ç –æ–± —ç—Ç–æ–º.""",
    
    "üîó—Å—Å—ã–ª–∫–∞": """üîó –°—Å—ã–ª–∫–∞

–í—Å—Ç–∞–≤—å—Ç–µ –ø–æ–ª–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ Reels
–ü—Ä–∏–º–µ—Ä: https://www.instagram.com/reel/CojtW7aL8gJ/

‚ö†Ô∏è –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ Instagram Reels.
–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ Stories, IGTV –∏–ª–∏ –ø—Ä–æ—Ñ–∏–ª–∏."""
}


def get_user_context_confirmation_keyboard():
    """Returns keyboard for user context confirmation."""
    buttons = [
        [InlineKeyboardButton(text="‚úÖ –í—Å–µ –≤–µ—Ä–Ω–æ, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º!", callback_data="confirm_context_correct")],
        [InlineKeyboardButton(text="üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="confirm_context_restart")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_generation_mode_keyboard(has_context: bool = False, context_summary: str = None) -> InlineKeyboardMarkup:
    """Get keyboard for selecting generation mode.
    
    Args:
        has_context: Whether user has saved context
        context_summary: Short summary of user context
        
    Returns:
        InlineKeyboardMarkup with generation options
    """
    buttons = []
    
    # Always available option - no context
    buttons.append([
        InlineKeyboardButton(text="ü§ñ –ë–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞", callback_data="gen_mode:no_context")
    ])
    
    # Add context option if user has saved context
    if has_context:
        context_text = "üìù –° –º–æ–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º"
        if context_summary:
            context_text += f" ({context_summary[:20]}...)"
        
        buttons.append([
            InlineKeyboardButton(text=context_text, callback_data="gen_mode:with_context")
        ])
    
    # Option to create new context
    buttons.append([
        InlineKeyboardButton(text="‚úçÔ∏è –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç", callback_data="gen_mode:create_context")
    ])
    
    # Cancel button
    buttons.append([
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_analysis")
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_vision_analysis_keyboard(reel_id: str, video_url: str) -> InlineKeyboardMarkup:
    """Get keyboard for Vision Analysis options.
    
    Args:
        reel_id: Reel ID from Apify
        video_url: Direct video URL
        
    Returns:
        InlineKeyboardMarkup with Vision Analysis options
    """
    buttons = [
        [InlineKeyboardButton(
            text="üî¨ –ê–Ω–∞–ª–∏–∑ —Å AI Vision", 
            callback_data=f"vision_scenario:{reel_id}:{video_url}"
        )],
        [InlineKeyboardButton(
            text="üìä –û–±—ã—á–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π", 
            callback_data=f"basic_scenario:{reel_id}"
        )],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_analysis")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


# –ö–æ–Ω—Ç–µ–∫—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def get_contexts_main_keyboard() -> InlineKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º–∏."""
    buttons = [
        [InlineKeyboardButton(text="üìã –ú–æ–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã", callback_data="contexts:list")],
        [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç", callback_data="contexts:create")],
        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="contexts:refresh")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤
def get_contexts_list_keyboard(contexts: list, page: int = 0, per_page: int = 5) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    buttons = []
    
    # –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    total_contexts = len(contexts)
    start_idx = page * per_page
    end_idx = min(start_idx + per_page, total_contexts)
    
    # –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    for i in range(start_idx, end_idx):
        context = contexts[i]
        context_id = context.get('id', i)
        name = context.get('name', f'–ö–æ–Ω—Ç–µ–∫—Å—Ç {i+1}')
        
        # –û–≥—Ä–∞–Ω–∏—á–∏—Ç—å –¥–ª–∏–Ω—É –Ω–∞–∑–≤–∞–Ω–∏—è
        if len(name) > 25:
            name = name[:22] + "..."
        
        buttons.append([
            InlineKeyboardButton(
                text=f"üìã {name}", 
                callback_data=f"context:view:{context_id}"
            )
        ])
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
    nav_buttons = []
    if page > 0:
        nav_buttons.append(
            InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"contexts:page:{page-1}")
        )
    
    if end_idx < total_contexts:
        nav_buttons.append(
            InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"contexts:page:{page+1}")
        )
    
    if nav_buttons:
        buttons.append(nav_buttons)
    
    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    management_buttons = [
        InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å", callback_data="contexts:create"),
        InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="contexts:refresh")
    ]
    buttons.append(management_buttons)
    
    # –ù–∞–∑–∞–¥
    buttons.append([
        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="contexts:main")
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
def get_context_view_keyboard(context_id: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞."""
    buttons = [
        [
            InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"context:edit:{context_id}"),
            InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"context:delete:{context_id}")
        ],
        [
            InlineKeyboardButton(text="üìã –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞", callback_data=f"context:use:{context_id}")
        ],
        [
            InlineKeyboardButton(text="üìÑ –°–∫–∞—á–∞—Ç—å –∫–∞–∫ —Ç–µ–∫—Å—Ç", callback_data=f"context:download:{context_id}")
        ],
        [
            InlineKeyboardButton(text="‚óÄÔ∏è –ö —Å–ø–∏—Å–∫—É –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤", callback_data="contexts:list")
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
def get_context_delete_keyboard(context_id: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞."""
    buttons = [
        [
            InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"context:delete_confirm:{context_id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"context:view:{context_id}")
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞, —á—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
def get_context_edit_keyboard(context_id: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞, —á—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ."""
    buttons = [
        [InlineKeyboardButton(text="üìù –ù–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"context:edit_name:{context_id}")],
        [InlineKeyboardButton(text="üìÑ –û–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"context:edit_desc:{context_id}")],
        [InlineKeyboardButton(text="üíº –î–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞", callback_data=f"context:edit_data:{context_id}")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É", callback_data=f"context:view:{context_id}")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç–º–µ–Ω—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
def get_context_edit_cancel_keyboard(context_id: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç–º–µ–Ω—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    buttons = [
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"context:view:{context_id}")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ
def get_context_selection_keyboard(contexts: list) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è."""
    buttons = []
    
    # –î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤—ã–µ 5 –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤
    for i, context in enumerate(contexts[:5]):
        context_id = context.get('id', i)
        name = context.get('name', f'–ö–æ–Ω—Ç–µ–∫—Å—Ç {i+1}')
        
        # –û–≥—Ä–∞–Ω–∏—á–∏—Ç—å –¥–ª–∏–Ω—É –Ω–∞–∑–≤–∞–Ω–∏—è
        if len(name) > 30:
            name = name[:27] + "..."
        
        buttons.append([
            InlineKeyboardButton(
                text=f"üìã {name}", 
                callback_data=f"context:select:{context_id}"
            )
        ])
    
    # –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤ –±–æ–ª—å—à–µ 5, –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ"
    if len(contexts) > 5:
        buttons.append([
            InlineKeyboardButton(text="üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã", callback_data="contexts:list_for_selection")
        ])
    
    # –û–ø—Ü–∏—è –±–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    buttons.append([
        InlineKeyboardButton(text="üö´ –ë–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞", callback_data="context:select:none")
    ])
    
    # –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    buttons.append([
        InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π", callback_data="contexts:create_for_analysis")
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è
def get_scenario_format_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è."""
    buttons = [
        [
            InlineKeyboardButton(text="üì± –í —Å–æ–æ–±—â–µ–Ω–∏–∏", callback_data="scenario_format:message"),
            InlineKeyboardButton(text="üìÑ –¢–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª", callback_data="scenario_format:file")
        ],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_analysis")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)
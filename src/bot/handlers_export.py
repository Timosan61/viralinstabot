"""Handlers for export functionality."""

import logging
import os
from pathlib import Path
from aiogram import Router, F
from aiogram.types import CallbackQuery, FSInputFile
from aiogram.fsm.context import FSMContext

from src.features.export.json_export import JsonExporter
from src.storage.sqlite import db
from src.utils.logger import get_logger
from src.utils.message_formatter import format_reel_scenario_message
from src.utils.formatters import format_number, format_percentage
from src.bot.keyboards import get_back_to_main_keyboard

logger = get_logger(__name__)
router = Router()


@router.callback_query(F.data.startswith("export_"))
async def handle_export(callback: CallbackQuery, state: FSMContext):
    """Handle export button clicks from analytics message."""
    try:
        # Parse export format from callback data
        format_type = callback.data.split("_")[1]  # excel, csv, or json
        
        # Get user's last report from database
        user = await db.get_or_create_user(telegram_id=callback.from_user.id)
        last_report = await db.get_last_user_report(user.id)
        
        if not last_report:
            await callback.answer("‚ùå –û—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # Get analysis result and raw data
        analysis_result = last_report.analysis_result
        # Raw data is not stored in database, pass empty list
        raw_data = []
        
        # Only JSON export is supported
        if format_type == "json":
            exporter = JsonExporter()
            await callback.answer("üìã –ì–µ–Ω–µ—Ä–∏—Ä—É—é JSON —Ñ–∞–π–ª...")
        else:
            await callback.answer("‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ JSON —Ñ–æ—Ä–º–∞—Ç", show_alert=True)
            return
        
        # Export data (not async)
        export_path = exporter.export(analysis_result, raw_data)
        
        # Send file to user
        with open(export_path, "rb") as export_file:
            await callback.message.answer_document(
                document=FSInputFile(export_path, filename=export_path.name),
                caption=f"‚úÖ –î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ {format_type.upper()}\n\n"
                        f"üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(analysis_result.reels)}"
            )
        
        # Clean up file after sending
        os.remove(export_path)
        
    except Exception as e:
        logger.error(f"Error during export: {e}")
        await callback.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö",
            show_alert=True
        )


@router.callback_query(F.data == "download_pdf")
async def handle_download_pdf(callback: CallbackQuery, state: FSMContext):
    """Handle PDF download button."""
    try:
        # Get user's last report
        user = await db.get_or_create_user(telegram_id=callback.from_user.id)
        last_report = await db.get_last_user_report(user.id)
        
        if not last_report or not last_report.pdf_path:
            await callback.answer("‚ùå PDF –æ—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # Check if file exists
        pdf_path = Path(last_report.pdf_path)
        if not pdf_path.exists():
            await callback.answer("‚ùå –§–∞–π–ª –æ—Ç—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        await callback.answer("üìë –û—Ç–ø—Ä–∞–≤–ª—è—é PDF –æ—Ç—á–µ—Ç...")
        
        # Send PDF
        with open(pdf_path, "rb") as pdf_file:
            await callback.message.answer_document(
                document=FSInputFile(pdf_path, filename=f"reels_analysis_{last_report.id}.pdf"),
                caption="üìë –ü–æ–ª–Ω—ã–π PDF –æ—Ç—á–µ—Ç —Å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏"
            )
    
    except Exception as e:
        logger.error(f"Error sending PDF: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ PDF", show_alert=True)


@router.callback_query(F.data == "download_excel")
async def handle_download_excel(callback: CallbackQuery, state: FSMContext):
    """Handle Excel download from PDF report."""
    await handle_export(callback, state)


@router.callback_query(F.data.startswith("scenario:"))
async def handle_scenario_view(callback: CallbackQuery, state: FSMContext):
    """Handle scenario view for individual reels."""
    try:
        # Parse reel ID from callback data
        reel_id = callback.data.split(":")[1]
        
        # Get user's last report
        user = await db.get_or_create_user(telegram_id=callback.from_user.id)
        last_report = await db.get_last_user_report(user.id)
        
        if not last_report:
            await callback.answer("‚ùå –û—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # Find the reel in the report
        analysis_result = last_report.analysis_result
        reel = None
        for r in analysis_result.reels:
            if str(r.id) == reel_id or r.url.endswith(reel_id):
                reel = r
                break
        
        if not reel:
            await callback.answer("‚ùå Reel –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # Generate scenario (placeholder for now)
        scenario_text = f"""
üé¨ <b>–í–∏—Ä—É—Å–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞</b>

<b>–•—É–∫ (0-3 —Å–µ–∫):</b>
–ù–∞—á–Ω–∏—Ç–µ —Å –ø—Ä–æ–≤–æ–∫–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –∏–ª–∏ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –∑–∞—Å—Ç–∞–≤–∏—Ç –∑—Ä–∏—Ç–µ–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è.

<b>–û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å (3-15 —Å–µ–∫):</b>
‚Ä¢ –ü–æ–∫–∞–∂–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ —Å–∏—Ç—É–∞—Ü–∏—é
‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±—ã—Å—Ç—Ä—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã

<b>–ö—É–ª—å–º–∏–Ω–∞—Ü–∏—è (15-25 —Å–µ–∫):</b>
–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –ø–æ–≤–æ—Ä–æ—Ç –∏–ª–∏ —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã.

<b>–ü—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é (25-30 —Å–µ–∫):</b>
–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –º–Ω–µ–Ω–∏–µ–º –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö.

<b>–ö–ª—é—á–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —É—Å–ø–µ—Ö–∞:</b>
‚úÖ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {format_number(reel.views)}
‚úÖ ER: {format_percentage(reel.engagement_rate)}
‚úÖ –¢—Ä–µ–Ω–¥—ã: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–≤—É–∫–∏ –∏ —ç—Ñ—Ñ–µ–∫—Ç—ã
"""
        
        # Send scenario message
        await callback.message.answer(
            format_reel_scenario_message(scenario_text, reel.url),
            parse_mode="HTML",
            reply_markup=get_back_to_main_keyboard()
        )
        
        await callback.answer("‚úçÔ∏è –°—Ü–µ–Ω–∞—Ä–∏–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
        
    except Exception as e:
        logger.error(f"Error showing scenario: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è", show_alert=True)
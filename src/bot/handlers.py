"""Updated Telegram bot handlers for new interface."""

import logging
import re
from datetime import datetime
from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.fsm.context import FSMContext

from src.bot.states import AnalysisStatesV2, UserData
from src.bot.keyboards import (
    get_main_menu_keyboard, get_period_keyboard,
    get_sample_size_keyboard, get_confirmation_keyboard,
    get_back_to_main_keyboard, get_new_analysis_keyboard,
    get_cancel_keyboard, get_analytics_keyboard, ANALYSIS_TYPE_MESSAGES,
    get_generation_mode_keyboard, get_scenario_format_keyboard,
    get_context_selection_keyboard
)
from src.services.apify_direct import apify_direct_service
from src.services.pdf import pdf_service
from src.services.rate_limiter import rate_limiter
from src.services.monthly_limiter import monthly_limiter
from src.storage.sqlite import db
from src.domain.models import QueryPayload, ReportStatus
from src.domain.constants import USD_TO_RUB, PRICE_MULTIPLIER
from src.utils.logger import get_logger
from src.utils.formatters import format_currency, format_number
from src.utils.message_formatter import format_full_analytics_message
from src.features.vision_analysis import get_scenario_generator
from src.features.user_context import get_context_manager

logger = get_logger(__name__)
router = Router()

# Welcome message
WELCOME_MESSAGE = """üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!

–Ø ‚Äî AI-–∞–Ω–∞–ª–∏—Ç–∏–∫ Reels: –∏—â—É, –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏ –ø–æ–º–æ–≥–∞—é –¥–µ–ª–∞—Ç—å –≤–∏—Ä—É—Å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç.

–ß—Ç–æ –º–æ–≥—É:
‚Ä¢ –ê–Ω–∞–ª–∏–∑ –ø–æ @–∞–∫–∫–∞—É–Ω—Ç—É, #—Ö—ç—à—Ç–µ–≥—É, üìç–ª–æ–∫–∞—Ü–∏–∏ –∏–ª–∏ üîó —Å—Å—ã–ª–∫–µ
‚Ä¢ –î–∞—é –º–µ—Ç—Ä–∏–∫–∏ 
‚Ä¢ –û–ø—Ä–µ–¥–µ–ª—è—é –≤–∏—Ä—É—Å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –≤–∏–∑—É–∞–ª —Ä–æ–ª–∏–∫–∞
‚Ä¢ –ù–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É—é –≤–∏—Ä—É—Å–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π Reels —Å —Ç–≤–æ–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º

–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç:
1Ô∏è‚É£ –í—ã–±–µ—Ä–∏ —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞ –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ
2Ô∏è‚É£ –Ø –ø–æ–∫–∞–∂—É —Ü–µ–Ω—É ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–¥–∏
3Ô∏è‚É£ –ß–µ—Ä–µ–∑ 1-2 –º–∏–Ω –ø–æ–ª—É—á–∏—à—å PDF-–æ—Ç—á—ë—Ç —Å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏

üí° –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è –Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑–∞ üëá"""


@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    """Handle /start command."""
    await state.clear()
    
    # Get or create user
    user = await db.get_or_create_user(
        telegram_id=message.from_user.id,
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name
    )
    
    await message.answer(
        WELCOME_MESSAGE,
        reply_markup=get_main_menu_keyboard()
    )
    await state.set_state(AnalysisStatesV2.main_menu)


@router.message(Command("help"))
async def cmd_help(message: Message):
    """Handle /help command."""
    help_text = """‚ÑπÔ∏è –ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞

–¢–∏–ø—ã –∞–Ω–∞–ª–∏–∑–∞:
‚Ä¢ @–∞–∫–∫–∞—É–Ω—Ç - –∞–Ω–∞–ª–∏–∑ Reels –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚Ä¢ #—Ö—ç—à—Ç–µ–≥ - –∞–Ω–∞–ª–∏–∑ Reels –ø–æ —Ö—ç—à—Ç–µ–≥—É
‚Ä¢ üìç–ª–æ–∫–∞—Ü–∏—è - –∞–Ω–∞–ª–∏–∑ Reels –ø–æ –≥–µ–æ–º–µ—Ç–∫–µ
‚Ä¢ üîó—Å—Å—ã–ª–∫–∞ - –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ Reel

–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
‚Ä¢ –ü–µ—Ä–∏–æ–¥: 3, 7 –∏–ª–∏ 14 –¥–Ω–µ–π
‚Ä¢ –†–∞–∑–º–µ—Ä –≤—ã–±–æ—Ä–∫–∏: 50, 100 –∏–ª–∏ 200 Reels

–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–∏–ø–∞ –∏ –æ–±—ä–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞.

–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º: @your_support"""
    
    await message.answer(help_text)


@router.message(Command("cancel"))
async def cmd_cancel(message: Message, state: FSMContext):
    """Handle /cancel command."""
    await state.clear()
    await message.answer(
        "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
        reply_markup=get_main_menu_keyboard()
    )
    await state.set_state(AnalysisStatesV2.main_menu)


# Analysis type selection handlers
@router.callback_query(StateFilter(AnalysisStatesV2.main_menu), F.data.startswith("type:"))
async def handle_analysis_type_selection(callback: CallbackQuery, state: FSMContext):
    """Handle analysis type selection."""
    analysis_type_map = {
        "type:account": "@–∞–∫–∫–∞—É–Ω—Ç",
        "type:hashtag": "#—Ö—ç—à—Ç–µ–≥",
        "type:location": "üìç–ª–æ–∫–∞—Ü–∏—è",
        "type:reel_url": "üîó—Å—Å—ã–ª–∫–∞"
    }
    
    analysis_type = analysis_type_map.get(callback.data)
    
    # Save analysis type
    user_data = UserData()
    user_data.analysis_type = analysis_type
    await state.update_data(user_data=user_data.to_dict())
    
    # Send instructions and set appropriate state
    await callback.message.answer(
        ANALYSIS_TYPE_MESSAGES[analysis_type]
    )
    
    # Set state based on type
    state_map = {
        "@–∞–∫–∫–∞—É–Ω—Ç": AnalysisStatesV2.waiting_for_account,
        "#—Ö—ç—à—Ç–µ–≥": AnalysisStatesV2.waiting_for_hashtag,
        "üìç–ª–æ–∫–∞—Ü–∏—è": AnalysisStatesV2.waiting_for_location,
        "üîó—Å—Å—ã–ª–∫–∞": AnalysisStatesV2.waiting_for_reel_url
    }
    
    await state.set_state(state_map[analysis_type])
    await callback.answer()


# Universal Reel URL handler (works in any state)
@router.message(F.text.regexp(r'https?://(?:www\.)?instagram\.com/reel/[A-Za-z0-9_-]+'))
async def handle_reel_url_universal(message: Message, state: FSMContext):
    """Handle Reel URL in any state."""
    url = message.text.strip()
    
    # Create user data for URL analysis
    user_data = UserData()
    user_data.analysis_type = "üîó—Å—Å—ã–ª–∫–∞"
    user_data.input_value = url
    user_data.generation_mode = "no_context"  # Default mode
    await state.update_data(user_data=user_data.to_dict())
    
    # Start analysis immediately
    await start_reel_vision_analysis(message, state, user_data)


# Input handlers for each analysis type
@router.message(StateFilter(AnalysisStatesV2.waiting_for_account))
async def handle_account_input(message: Message, state: FSMContext):
    """Handle account username input."""
    text = message.text.strip()
    
    # Check if it's an Instagram profile URL
    instagram_url_pattern = r'(?:https?://)?(?:www\.)?instagram\.com/([a-zA-Z0-9._]+)/?'
    match = re.match(instagram_url_pattern, text)
    
    if match:
        # Extract username from URL
        username = match.group(1)
    else:
        # Remove @ if present
        username = text.replace("@", "")
    
    # Validate username
    if not re.match(r'^[a-zA-Z0-9._]+$', username):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç username. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, —Ç–æ—á–∫–∏ –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è."
        )
        return
    
    # Update user data
    data = await state.get_data()
    user_data = UserData.from_dict(data.get("user_data", {}))
    user_data.input_value = username
    await state.update_data(user_data=user_data.to_dict())
    
    # Show period selection
    await message.answer(
        "üìÖ –ó–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å?",
        reply_markup=get_period_keyboard()
    )
    await state.set_state(AnalysisStatesV2.selecting_period)


@router.message(StateFilter(AnalysisStatesV2.waiting_for_hashtag))
async def handle_hashtag_input(message: Message, state: FSMContext):
    """Handle hashtag input."""
    hashtag = message.text.strip().replace("#", "")
    
    # Validate hashtag
    if not hashtag or " " in hashtag:
        await message.answer(
            "‚ùå –í–≤–µ–¥–∏—Ç–µ –æ–¥–∏–Ω —Ö—ç—à—Ç–µ–≥ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤."
        )
        return
    
    # Update user data
    data = await state.get_data()
    user_data = UserData.from_dict(data.get("user_data", {}))
    user_data.input_value = hashtag
    await state.update_data(user_data=user_data.to_dict())
    
    # Show period selection
    await message.answer(
        "üìÖ –ó–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å?",
        reply_markup=get_period_keyboard()
    )
    await state.set_state(AnalysisStatesV2.selecting_period)


@router.message(StateFilter(AnalysisStatesV2.waiting_for_location))
async def handle_location_input(message: Message, state: FSMContext):
    """Handle location input."""
    location = message.text.strip()
    
    if not location:
        await message.answer(
            "‚ùå –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞ –∏–ª–∏ –≥–æ—Ä–æ–¥–∞.",
            reply_markup=get_cancel_keyboard()
        )
        return
    
    # Update user data
    data = await state.get_data()
    user_data = UserData.from_dict(data.get("user_data", {}))
    user_data.input_value = location
    await state.update_data(user_data=user_data.to_dict())
    
    # Show period selection
    await message.answer(
        "üìÖ –ó–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å?",
        reply_markup=get_period_keyboard()
    )
    await state.set_state(AnalysisStatesV2.selecting_period)


@router.message(StateFilter(AnalysisStatesV2.waiting_for_reel_url))
async def handle_reel_url_input(message: Message, state: FSMContext):
    """Handle Reel URL input."""
    url = message.text.strip()
    
    # Validate URL
    if not re.match(r'https?://(?:www\.)?instagram\.com/reel/[A-Za-z0-9_-]+', url):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ Instagram Reel.",
            reply_markup=get_cancel_keyboard()
        )
        return
    
    # Update user data
    data = await state.get_data()
    user_data = UserData.from_dict(data.get("user_data", {}))
    user_data.input_value = url
    user_data.generation_mode = "no_context"  # Default mode
    await state.update_data(user_data=user_data.to_dict())
    
    # Start analysis immediately
    await start_reel_vision_analysis(message, state, user_data)


# Period selection callback
@router.callback_query(StateFilter(AnalysisStatesV2.selecting_period), F.data.startswith("period:"))
async def handle_period_selection(callback: CallbackQuery, state: FSMContext):
    """Handle period selection."""
    period_days = int(callback.data.split(":")[1])
    
    # Update user data
    data = await state.get_data()
    user_data = UserData.from_dict(data.get("user_data", {}))
    user_data.period_days = period_days
    await state.update_data(user_data=user_data.to_dict())
    
    # Show sample size selection
    await callback.message.edit_text(
        "üìä –†–∞–∑–º–µ—Ä –≤—ã–±–æ—Ä–∫–∏: —Å–∫–æ–ª—å–∫–æ Reels –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å?",
        reply_markup=get_sample_size_keyboard()
    )
    await state.set_state(AnalysisStatesV2.selecting_sample_size)
    await callback.answer()


# Sample size selection callback
@router.callback_query(StateFilter(AnalysisStatesV2.selecting_sample_size), F.data.startswith("sample:"))
async def handle_sample_size_selection(callback: CallbackQuery, state: FSMContext):
    """Handle sample size selection."""
    sample_size = int(callback.data.split(":")[1])
    
    # Update user data
    data = await state.get_data()
    user_data = UserData.from_dict(data.get("user_data", {}))
    user_data.sample_size = sample_size
    await state.update_data(user_data=user_data.to_dict())
    
    # Show confirmation
    await show_confirmation(callback.message, state, user_data)
    await callback.answer()


async def show_confirmation(message: Message, state: FSMContext, user_data: UserData):
    """Show analysis confirmation with price."""
    # Get user limits
    user_id = message.chat.id
    _, daily_remaining = rate_limiter.check_limit(user_id)
    monthly_usage = monthly_limiter.get_monthly_usage(user_id)
    
    # Calculate price
    base_price = 30  # Base price in RUB (reduced for smaller samples)
    
    # Price modifiers
    if user_data.analysis_type == "üîó—Å—Å—ã–ª–∫–∞":
        price_rub = 20  # Fixed price for single reel
    else:
        # Price based on sample size
        size_multiplier = {5: 0.8, 7: 1, 10: 1.2}.get(user_data.sample_size, 1)
        # Price based on period
        period_multiplier = {3: 0.8, 7: 1, 14: 1.3}.get(user_data.period_days, 1)
        price_rub = base_price * size_multiplier * period_multiplier
    
    user_data.price_rub = price_rub
    await state.update_data(user_data=user_data.to_dict())
    
    # Build confirmation message
    if user_data.analysis_type == "üîó—Å—Å—ã–ª–∫–∞":
        confirmation_text = f"""üìã –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞

üîó –¢–∏–ø: –ê–Ω–∞–ª–∏–∑ Reel –ø–æ —Å—Å—ã–ª–∫–µ
üìé URL: {user_data.input_value[:50]}...
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {format_currency(price_rub)}

–ë—É–¥–µ—Ç –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É–∫–∞–∑–∞–Ω–Ω—ã–π Reel —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏.

üìä –û—Å—Ç–∞—Ç–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤: {monthly_usage['remaining']}/{monthly_usage['limit']} –≤ –º–µ—Å—è—Ü"""
    else:
        type_emoji = {"@–∞–∫–∫–∞—É–Ω—Ç": "üë§", "#—Ö—ç—à—Ç–µ–≥": "üè∑", "üìç–ª–æ–∫–∞—Ü–∏—è": "üìç"}
        confirmation_text = f"""üìã –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞

{type_emoji.get(user_data.analysis_type, "üìä")} –¢–∏–ø: {user_data.analysis_type}
üîç –ó–∞–ø—Ä–æ—Å: {user_data.input_value}
üìÖ –ü–µ—Ä–∏–æ–¥: {user_data.period_days} –¥–Ω–µ–π
üìä –í—ã–±–æ—Ä–∫–∞: {user_data.sample_size} Reels
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {format_currency(price_rub)}

–ë—É–¥–µ—Ç –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–æ {user_data.sample_size} —Å–∞–º—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö Reels.

üìä –û—Å—Ç–∞—Ç–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤: {monthly_usage['remaining']}/{monthly_usage['limit']} –≤ –º–µ—Å—è—Ü"""
    
    await message.edit_text(
        confirmation_text,
        reply_markup=get_confirmation_keyboard(price_rub)
    )
    await state.set_state(AnalysisStatesV2.confirming_analysis)


# Confirm analysis callback
@router.callback_query(StateFilter(AnalysisStatesV2.confirming_analysis), F.data == "confirm_analysis")
async def handle_confirm_analysis(callback: CallbackQuery, state: FSMContext):
    """Handle analysis confirmation."""
    await callback.answer("üöÄ –ó–∞–ø—É—Å–∫–∞—é –∞–Ω–∞–ª–∏–∑...")
    
    # Show processing message
    await callback.message.edit_text(
        "‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ...\n\n"
        "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 1-2 –º–∏–Ω—É—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–±—ä–µ–º–∞ –¥–∞–Ω–Ω—ã—Ö.\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
    )
    
    # Get user data
    data = await state.get_data()
    user_data = UserData.from_dict(data.get("user_data", {}))
    
    try:
        # Check daily rate limit
        is_allowed, remaining = rate_limiter.check_limit(callback.from_user.id)
        if not is_allowed:
            await callback.message.edit_text(
                "‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_new_analysis_keyboard()
            )
            await state.clear()
            return
        
        # Check monthly rate limit
        is_monthly_allowed, monthly_remaining, reset_date = monthly_limiter.check_monthly_limit(callback.from_user.id)
        if not is_monthly_allowed:
            reset_str = reset_date.strftime("%d.%m.%Y") if reset_date else "–Ω–∞—á–∞–ª–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Å—è—Ü–∞"
            await callback.message.edit_text(
                f"‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –º–µ—Å—è—á–Ω—ã–π –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ (10 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–µ—Å—è—Ü).\n\n"
                f"–õ–∏–º–∏—Ç –æ–±–Ω–æ–≤–∏—Ç—Å—è: {reset_str}\n\n"
                "–î–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                reply_markup=get_new_analysis_keyboard()
            )
            await state.clear()
            return
        
        # Add to rate limiters
        rate_limiter.add_request(callback.from_user.id)
        monthly_limiter.add_monthly_request(callback.from_user.id)
        
        # Import progress tracker
        from src.utils.progress import ProgressTracker
        
        # Create message updater for progress tracking
        async def update_progress_message(text: str):
            try:
                await callback.message.edit_text(text)
            except Exception:
                # Ignore errors if message hasn't changed
                pass
        
        # Initialize progress tracker
        progress_tracker = ProgressTracker(update_progress_message)
        
        # Run analysis based on type
        if user_data.analysis_type == "@–∞–∫–∫–∞—É–Ω—Ç":
            result = await apify_direct_service.analyze_account(
                user_data.input_value,
                user_data.period_days,
                user_data.sample_size,
                progress_callback=update_progress_message
            )
        elif user_data.analysis_type == "#—Ö—ç—à—Ç–µ–≥":
            result = await apify_direct_service.analyze_hashtag(
                user_data.input_value,
                user_data.period_days,
                user_data.sample_size,
                progress_callback=update_progress_message
            )
        elif user_data.analysis_type == "üìç–ª–æ–∫–∞—Ü–∏—è":
            result = await apify_direct_service.analyze_location(
                user_data.input_value,
                user_data.period_days,
                user_data.sample_size,
                progress_callback=update_progress_message
            )
        elif user_data.analysis_type == "üîó—Å—Å—ã–ª–∫–∞":
            result = await apify_direct_service.analyze_reel_url(
                user_data.input_value,
                progress_callback=update_progress_message
            )
        else:
            raise ValueError(f"Unknown analysis type: {user_data.analysis_type}")
        
        # Update progress for data processing
        await progress_tracker.update("process_data", 0.5)
        
        # Check if we have data
        if not result.reels:
            await callback.message.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ Reels –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.\n\n"
                f"üí° –ü—Ä–∏—á–∏–Ω–∞: {result.insights[0] if result.insights else '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                "‚Ä¢ –î—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å\n"
                "‚Ä¢ –£–≤–µ–ª–∏—á–∏—Ç—å –ø–µ—Ä–∏–æ–¥\n"
                "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞",
                reply_markup=get_new_analysis_keyboard()
            )
            await state.clear()
            return
        
        await progress_tracker.update("process_data", 1.0)
        
        # Create query payload for compatibility
        query_payload = QueryPayload(
            topic=user_data.input_value,
            period=user_data.period_days or 0,
            geo="WORLD",
            user_id=callback.from_user.id
        )
        result.query = query_payload
        
        # Save to database
        user = await db.get_or_create_user(telegram_id=callback.from_user.id)
        report = await db.create_report(
            user_id=user.id,
            query_payload=query_payload,
            price_rub=user_data.price_rub
        )
        
        # Generate PDF
        await progress_tracker.update("generate_pdf", 0.0)
        pdf_path = await pdf_service.generate_report(
            analysis_result=result,
            user_id=callback.from_user.id
        )
        await progress_tracker.update("generate_pdf", 1.0)
        
        # Update report
        await progress_tracker.update("save_db", 0.0)
        await db.update_report(
            report_id=report.id,
            analysis_result=result,
            pdf_path=pdf_path,
            status=ReportStatus.COMPLETED
        )
        await progress_tracker.update("save_db", 1.0)
        
        # Send analytics as text message first
        await callback.message.delete()
        
        # Format and send analytics message
        analytics_message = format_full_analytics_message(
            result=result,
            username=user_data.input_value if user_data.analysis_type == "@–∞–∫–∫–∞—É–Ω—Ç" else "Analytics",
            period_days=user_data.period_days or 7,
            sample_size=user_data.sample_size or len(result.reels)
        )
        
        await callback.message.answer(
            text=analytics_message,
            parse_mode="HTML",
            reply_markup=get_analytics_keyboard(has_pdf=True)
        )
        
        # Then send PDF as a file
        with open(pdf_path, "rb") as pdf_file:
            await callback.message.answer_document(
                document=FSInputFile(pdf_path, filename=f"reels_analysis_{report.id}.pdf"),
                caption=(
                    f"üìë –ü–æ–ª–Ω—ã–π PDF –æ—Ç—á–µ—Ç —Å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏\n"
                    f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {format_currency(user_data.price_rub)}\n"
                    f"üìä –û—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–æ–≤: {monthly_remaining - 1}/{monthly_limiter.get_monthly_usage(callback.from_user.id)['limit']}"
                )
            )
        
        # Clear state
        await state.clear()
        
        # Increment user requests
        await db.increment_user_requests(callback.from_user.id)
        
    except Exception as e:
        logger.error(f"Error during analysis: {e}")
        
        error_message = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ."
        if "–ü—Ä–µ–≤—ã—à–µ–Ω –º–µ—Å—è—á–Ω—ã–π –ª–∏–º–∏—Ç" in str(e):
            error_message = (
                "‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –º–µ—Å—è—á–Ω—ã–π –ª–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞.\n"
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞."
            )
        elif "not found" in str(e).lower():
            error_message = (
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )
        
        await callback.message.edit_text(
            error_message,
            reply_markup=get_new_analysis_keyboard()
        )
        await state.clear()


# Cancel analysis callback
@router.callback_query(F.data == "cancel_analysis")
async def handle_cancel_analysis(callback: CallbackQuery, state: FSMContext):
    """Handle analysis cancellation."""
    await callback.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
    await state.clear()
    
    await callback.message.edit_text(
        "‚ùå –ê–Ω–∞–ª–∏–∑ –æ—Ç–º–µ–Ω–µ–Ω",
        reply_markup=get_back_to_main_keyboard()
    )


# New analysis callback
@router.callback_query(F.data == "new_analysis")
async def handle_new_analysis(callback: CallbackQuery, state: FSMContext):
    """Handle new analysis request."""
    await callback.answer()
    await state.clear()
    
    # Delete current message and send welcome
    await callback.message.delete()
    await callback.message.answer(
        WELCOME_MESSAGE,
        reply_markup=get_main_menu_keyboard()
    )
    await state.set_state(AnalysisStatesV2.main_menu)


# Back navigation callbacks
@router.callback_query(F.data == "back_to_main")
async def handle_back_to_main(callback: CallbackQuery, state: FSMContext):
    """Handle back to main menu."""
    await callback.answer()
    await state.clear()
    
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞:",
        reply_markup=get_main_menu_keyboard()
    )
    await state.set_state(AnalysisStatesV2.main_menu)


@router.callback_query(F.data == "back_to_period")
async def handle_back_to_period(callback: CallbackQuery, state: FSMContext):
    """Handle back to period selection."""
    await callback.answer()
    
    await callback.message.edit_text(
        "üìÖ –ó–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å?",
        reply_markup=get_period_keyboard()
    )
    await state.set_state(AnalysisStatesV2.selecting_period)


@router.callback_query(F.data == "main_menu")
async def handle_main_menu(callback: CallbackQuery, state: FSMContext):
    """Handle main menu button."""
    await callback.answer()
    await state.clear()
    
    # Delete and send new message
    await callback.message.delete()
    await callback.message.answer(
        WELCOME_MESSAGE,
        reply_markup=get_main_menu_keyboard()
    )
    await state.set_state(AnalysisStatesV2.main_menu)


async def show_generation_mode_selection(message: Message, state: FSMContext, user_data: UserData):
    """Show generation mode selection for URL analysis."""
    # Temporary solution: assume no context for now
    # TODO: Fix UserContextStorage to work with SQLAlchemy async
    has_context = False
    context_summary = None
    
    await message.answer(
        "üéØ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è:\n\n"
        "ü§ñ **–ë–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞** - –±–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑\n"
        "üìù **–° –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º** - –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n"
        "‚úçÔ∏è **–°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç** - –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ",
        reply_markup=get_generation_mode_keyboard(has_context, context_summary),
        parse_mode="Markdown"
    )
    await state.set_state(AnalysisStatesV2.selecting_generation_mode)


# Generation mode selection handlers
@router.callback_query(StateFilter(AnalysisStatesV2.selecting_generation_mode), F.data.startswith("gen_mode:"))
async def handle_generation_mode_selection(callback: CallbackQuery, state: FSMContext):
    """Handle generation mode selection."""
    mode = callback.data.split(":")[1]
    
    # Update user data
    data = await state.get_data()
    user_data = UserData.from_dict(data.get("user_data", {}))
    user_data.generation_mode = mode
    await state.update_data(user_data=user_data.to_dict())
    
    if mode == "no_context":
        await callback.answer("–ó–∞–ø—É—Å–∫–∞—é –∞–Ω–∞–ª–∏–∑ –±–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞...")
        await start_reel_vision_analysis(callback.message, state, user_data)
    elif mode == "with_context":
        await callback.answer("–ó–∞–ø—É—Å–∫–∞—é –∞–Ω–∞–ª–∏–∑ —Å –≤–∞—à–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º...")
        await start_reel_vision_analysis(callback.message, state, user_data)
    elif mode == "create_context":
        await callback.answer("–ù–∞—á–∏–Ω–∞—é —Å–±–æ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞...")
        # TODO: Redirect to context collection
        await callback.message.edit_text(
            "üìù –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ.\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ä–µ–∂–∏–º –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_generation_mode_keyboard(False)
        )
    
    await callback.answer()


async def start_reel_vision_analysis(message: Message, state: FSMContext, user_data: UserData):
    """Start the full Vision Analysis workflow for a single Reel."""
    status_message = await message.answer(
        "üîÑ –ó–∞–ø—É—Å–∫–∞—é –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–∏–ª–∞...\n\n"
        "–≠—Ç–∞–ø—ã:\n"
        "1Ô∏è‚É£ –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ Apify\n"
        "2Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å AI Vision\n"
        "3Ô∏è‚É£ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è\n"
        "4Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ PDF –æ—Ç—á–µ—Ç–∞\n\n"
        "‚è≥ –≠—Ç–æ –∑–∞–π–º–µ—Ç 2-3 –º–∏–Ω—É—Ç—ã..."
    )
    
    try:
        # Step 1: Get reel data from Apify
        await status_message.edit_text("1Ô∏è‚É£ –ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ —Ä–∏–ª–∞ —á–µ—Ä–µ–∑ Apify...")
        
        result = await apify_direct_service.analyze_reel_url(
            user_data.input_value,
            progress_callback=lambda text: status_message.edit_text(f"1Ô∏è‚É£ {text}")
        )
        
        if not result.reels:
            await status_message.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ä–∏–ª–∞.\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=get_new_analysis_keyboard()
            )
            await state.clear()
            return
        
        reel = result.reels[0]  # Get the first (and only) reel
        
        if not reel.video_url:
            await status_message.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ä–∏–ª.",
                reply_markup=get_new_analysis_keyboard()
            )
            await state.clear()
            return
        
        # Store video URL in user data
        user_data.video_url = reel.video_url
        await state.update_data(user_data=user_data.to_dict())
        
        # Step 2: Vision Analysis
        await status_message.edit_text("2Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∏–∑—É–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å AI Vision...")
        
        from src.features.vision_analysis.analyzer import VisionAnalyzer
        from src.utils.config import config
        
        vision_analyzer = VisionAnalyzer(api_key=config.api.openai_api_key)
        vision_result = await vision_analyzer.analyze_reel_by_url(reel.video_url)
        
        if not vision_result or vision_result.get("error"):
            await status_message.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –≤–∏–¥–µ–æ: {vision_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_new_analysis_keyboard()
            )
            await state.clear()
            return
        
        # Step 3: Generate scenario
        await status_message.edit_text("3Ô∏è‚É£ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π...")
        
        scenario_generator = get_scenario_generator()
        
        # Generate scenario based on mode
        if user_data.generation_mode == "with_context":
            # TODO: Implement context retrieval when UserContextStorage is fixed
            # For now, use basic scenario
            scenario_result = await scenario_generator.generate_complete_scenario(
                reel_data=reel, 
                video_url=reel.video_url
            )
            scenario = scenario_result.original_scenario
        else:
            # Basic scenario without context
            scenario_result = await scenario_generator.generate_complete_scenario(
                reel_data=reel, 
                video_url=reel.video_url
            )
            scenario = scenario_result.original_scenario
        
        if not scenario:
            await status_message.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_new_analysis_keyboard()
            )
            await state.clear()
            return
        
        # Step 4: Skip PDF generation for now due to library issues
        await status_message.edit_text("4Ô∏è‚É£ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...")
        
        # Generate comprehensive results message
        results_message = generate_vision_analysis_message(
            reel=reel,
            vision_result=vision_result,
            scenario=scenario,
            generation_mode=user_data.generation_mode,
            audio_transcript=scenario_result.audio_transcript if scenario_result else None
        )
        
        # Generate and send text report with all scenarios
        await status_message.edit_text("üìÑ –°–æ–∑–¥–∞—é –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç...")
        
        try:
            # Create mock AnalysisResult for text generator
            class MockAnalysisResult:
                def __init__(self, reel_data, vision_result):
                    self.reels = [reel_data]
                    self.total_views = reel_data.views
                    self.total_likes = reel_data.likes
                    self.average_er = (reel_data.likes / reel_data.views) * 100 if reel_data.views > 0 else 0
                    self.engagement_rate = self.average_er
                    self.popular_hashtags = reel_data.hashtags[:10] if reel_data.hashtags else []
                    self.insights = [
                        f"–ê–Ω–∞–ª–∏–∑ {len(self.reels)} Instagram Reel",
                        f"–û–±—â–∏–π –æ—Ö–≤–∞—Ç: {self.total_views:,} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤",
                        f"–£—Ä–æ–≤–µ–Ω—å –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏: {self.average_er:.2f}%"
                    ]
                    self.recommendations = [
                        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞",
                        "–ê–¥–∞–ø—Ç–∏—Ä—É–π—Ç–µ –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ–¥ —Å–≤–æ–π —Å—Ç–∏–ª—å",
                        "–£—á–∏—Ç—ã–≤–∞–π—Ç–µ –∞—É–¥–∏—Ç–æ—Ä–∏—é –∏ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ Reel"
                    ]
                    self.usage_cost_usd = 0.05  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–Ω–∞–ª–∏–∑–∞
                    self.metadata = {
                        'query_type': 'direct_link',
                        'period': 'N/A',
                        'sample_size': 1,
                        'vision_analysis': vision_result.get('visual_analysis', '') if vision_result else ''
                    }
            
            analysis_result = MockAnalysisResult(reel, vision_result)
            
            # Prepare scenarios data
            scenarios = {
                'vision_analysis': vision_result.get('visual_analysis', '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω') if vision_result else '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
                'audio_transcript': scenario_result.audio_transcript or '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞',
                'original_scenario': scenario_result.original_scenario or '–ù–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω',
                'variant_scenario': scenario_result.variant_scenario or '–ù–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω', 
                'context_scenario': scenario_result.context_scenario or '–ù–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω'
            }
            
            # Generate simple text report
            report_text = f"""
üé¨ –ê–Ω–∞–ª–∏–∑ –≤–∏—Ä—É—Å–Ω–æ–≥–æ Reel

üìä –ú–µ—Ç—Ä–∏–∫–∏:
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {format_number(reel.views)}
‚Ä¢ –õ–∞–π–∫–∏: {format_number(reel.likes)}
‚Ä¢ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {format_number(reel.comments)}
‚Ä¢ –®–µ—Ä—ã: {format_number(reel.shares)}
‚Ä¢ ER: {(reel.engagement_rate * 100):.2f}%

‚úçÔ∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏:
{scenarios.get('basic_scenario', '–ù–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω')}

üéØ –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π:
{scenarios.get('context_scenario', '–ù–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω')}

üîó –û—Ä–∏–≥–∏–Ω–∞–ª: {reel.url}
"""
            
            # Save to file
            from pathlib import Path
            import tempfile
            
            temp_dir = Path("data/reports")
            temp_dir.mkdir(parents=True, exist_ok=True)
            
            report_filename = f"viral_analysis_{reel.id}_{message.from_user.id}.txt"
            report_path = temp_dir / report_filename
            
            with open(report_path, 'w', encoding='utf-8') as f:
                f.write(report_text)
            
            # Send text file
            from aiogram.types import FSInputFile
            await message.answer_document(
                FSInputFile(report_path),
                caption="üìä –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –∞–Ω–∞–ª–∏–∑–∞ —Å –≤—Å–µ–º–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è–º–∏"
            )
            
            # Clean up file after sending
            report_path.unlink(missing_ok=True)
            
        except Exception as e:
            logger.error(f"Error generating text report: {e}")
        
        # Send results message
        await status_message.edit_text(
            results_message,
            parse_mode="HTML",
            reply_markup=get_new_analysis_keyboard()
        )
        
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"Error in Vision Analysis workflow: {e}", exc_info=True)
        await status_message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_new_analysis_keyboard()
        )
        await state.clear()


def generate_vision_analysis_message(reel, vision_result, scenario, generation_mode, audio_transcript=None):
    """Generate comprehensive message with Vision Analysis results."""
    
    # Basic reel info
    title = reel.title[:100] + "..." if reel.title and len(reel.title) > 100 else reel.title or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
    
    message_parts = [
        "üé¨ <b>AI Vision –ê–Ω–∞–ª–∏–∑ Reels</b>\n",
        f"üì± <b>–†–∏–ª:</b> {title}",
        f"üë§ <b>–ê–≤—Ç–æ—Ä:</b> {reel.author_username}",
        f"üëÄ <b>–ü—Ä–æ—Å–º–æ—Ç—Ä—ã:</b> {reel.views:,}",
        f"‚ù§Ô∏è <b>–õ–∞–π–∫–∏:</b> {reel.likes:,}",
        f"üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:</b> {reel.comments:,}",
        f"üìä <b>ER:</b> {reel.engagement_rate:.2f}%\n"
    ]
    
    # Visual analysis
    if vision_result.get("visual_analysis"):
        visual_text = vision_result["visual_analysis"][:500] + "..." if len(vision_result["visual_analysis"]) > 500 else vision_result["visual_analysis"]
        message_parts.extend([
            "üîç <b>–í–∏–∑—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑:</b>",
            f"<i>{visual_text}</i>\n"
        ])
    
    # Patterns
    if vision_result.get("patterns"):
        patterns_text = vision_result["patterns"][:400] + "..." if len(vision_result["patterns"]) > 400 else vision_result["patterns"]
        message_parts.extend([
            "üìà <b>–í–∏—Ä—É—Å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã:</b>",
            f"<i>{patterns_text}</i>\n"
        ])
    
    # Audio transcript (Whisper)
    if audio_transcript and audio_transcript != '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞':
        transcript_text = audio_transcript[:300] + "..." if len(audio_transcript) > 300 else audio_transcript
        message_parts.extend([
            "üé§ <b>–ê—É–¥–∏–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è (Whisper):</b>",
            f"<i>{transcript_text}</i>\n"
        ])
    
    # Audio analysis
    if vision_result.get("audio_analysis"):
        audio_text = vision_result["audio_analysis"][:300] + "..." if len(vision_result["audio_analysis"]) > 300 else vision_result["audio_analysis"]
        message_parts.extend([
            "üéµ <b>–ê—É–¥–∏–æ –∞–Ω–∞–ª–∏–∑:</b>",
            f"<i>{audio_text}</i>\n"
        ])
    
    # Generated scenario
    if scenario:
        scenario_text = scenario[:600] + "..." if len(scenario) > 600 else scenario
        mode_text = "–° –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º" if generation_mode == "with_context" else "–ë–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"
        message_parts.extend([
            f"ü§ñ <b>–°—Ü–µ–Ω–∞—Ä–∏–π ({mode_text}):</b>",
            f"<i>{scenario_text}</i>\n"
        ])
    
    message_parts.append("üìë <b>–ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª–µ –Ω–∏–∂–µ</b>")
    
    return "\n".join(message_parts)


# ===========================================
# –ù–û–í–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –ü–û–õ–ù–û–ì–û 4-–ü–†–û–ú–¢–û–í–û–ì–û WORKFLOW
# ===========================================

@router.callback_query(F.data.startswith("scenario:"))
async def handle_scenario_generation(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å—Ü–µ–Ω–∞—Ä–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ Reel."""
    try:
        reel_id = callback.data.split(":")[1]
        
        # –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ –µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞—Ö
        user = await db.get_or_create_user(callback.from_user.id)
        context_manager = get_context_manager()
        
        if not context_manager:
            await callback.answer("–°–µ—Ä–≤–∏—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        contexts = await context_manager.get_user_contexts(user.id)
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        contexts_data = []
        for context in contexts:
            contexts_data.append({
                'id': context.id,
                'name': context.name,
                'description': context.description
            })
        
        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å reel_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(current_reel_id=reel_id)
        
        text = """üé¨ –ì–ï–ù–ï–†–ê–¶–ò–Ø –°–¶–ï–ù–ê–†–ò–Ø

–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π:"""
        
        await callback.message.edit_text(
            text,
            reply_markup=get_context_selection_keyboard(contexts_data)
        )
        
        await state.set_state(AnalysisStatesV2.selecting_generation_mode)
        
    except Exception as e:
        logger.error(f"Error in scenario generation: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("context:select:"))
async def handle_context_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è."""
    try:
        context_selection = callback.data.split(":")[2]
        data = await state.get_data()
        reel_id = data.get('current_reel_id')
        
        if not reel_id:
            await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID Reel", show_alert=True)
            return
        
        # –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        if context_selection == "none":
            await state.update_data(selected_context_id=None)
            context_text = "–±–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"
        else:
            context_id = int(context_selection)
            await state.update_data(selected_context_id=context_id)
            
            # –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            user = await db.get_or_create_user(callback.from_user.id)
            context_manager = get_context_manager()
            context = await context_manager.get_context_by_id(user.id, context_id)
            context_text = f"—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º '{context.name}'" if context else "—Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º"
        
        text = f"""‚úÖ –í—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º: {context_text}

üìÑ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è:"""
        
        await callback.message.edit_text(
            text,
            reply_markup=get_scenario_format_keyboard()
        )
        
    except Exception as e:
        logger.error(f"Error in context selection: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("scenario_format:"))
async def handle_scenario_format_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è."""
    try:
        format_type = callback.data.split(":")[1]
        data = await state.get_data()
        reel_id = data.get('current_reel_id')
        context_id = data.get('selected_context_id')
        
        if not reel_id:
            await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID Reel", show_alert=True)
            return
        
        # –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        status_message = await callback.message.edit_text(
            "üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π...\n\n"
            "‚è± –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 1-2 –º–∏–Ω—É—Ç—ã\n"
            "üß† –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∏–¥–µ–æ, –∞—É–¥–∏–æ –∏ —Å–æ–∑–¥–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏"
        )
        
        # –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ Reel –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await db.get_or_create_user(callback.from_user.id)
        last_report = await db.get_last_user_report(user.id)
        
        if not last_report or not hasattr(last_report, 'analysis_result'):
            await status_message.edit_text(
                "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞\n"
                "–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ Reels",
                reply_markup=get_new_analysis_keyboard()
            )
            return
        
        # –ù–∞–π—Ç–∏ –Ω—É–∂–Ω—ã–π Reel –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
        target_reel = None
        for reel in last_report.analysis_result.reels:
            if reel.id == reel_id:
                target_reel = reel
                break
        
        if not target_reel:
            await status_message.edit_text(
                "‚ùå Reel –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –∞–Ω–∞–ª–∏–∑–∞",
                reply_markup=get_new_analysis_keyboard()
            )
            return
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
        scenario_generator = get_scenario_generator()
        if not scenario_generator:
            await status_message.edit_text(
                "‚ùå –°–µ—Ä–≤–∏—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
                reply_markup=get_new_analysis_keyboard()
            )
            return
        
        # –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
        scenario_result = await scenario_generator.generate_complete_scenario(
            reel_data=target_reel,
            video_url=target_reel.video_url,
            user_id=user.id if context_id else None,
            context_id=context_id
        )
        
        if scenario_result.error_message:
            await status_message.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤:\n{scenario_result.error_message}",
                reply_markup=get_new_analysis_keyboard()
            )
            return
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—á–µ—Ç–∞
        scenarios_data = {
            'vision_analysis': scenario_result.vision_analysis,
            'original_scenario': scenario_result.original_scenario,
            'variant_scenario': scenario_result.variant_scenario,
            'context_scenario': scenario_result.context_scenario
        }
        
        reel_info = f"{target_reel.author_username} - {target_reel.title[:50]}..."
        
        if format_type == "file":
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
            report_text = f"""
üé¨ –ê–Ω–∞–ª–∏–∑ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –¥–ª—è Reel
{reel_info}

üî¨ AI Vision –∞–Ω–∞–ª–∏–∑:
{scenarios_data.get('vision_analysis', '–ù–µ –ø—Ä–æ–≤–æ–¥–∏–ª—Å—è')}

‚úçÔ∏è –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π:
{scenarios_data.get('original_scenario', '–ù–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω')}

üéØ –í–∞—Ä–∏–∞—Ç–∏–≤–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π:
{scenarios_data.get('variant_scenario', '–ù–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω')}

üìù –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π:
{scenarios_data.get('context_scenario', '–ù–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω')}

–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {datetime.now().strftime('%Y-%m-%d %H:%M')}
"""
            
            # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
            from io import BytesIO
            import re
            
            file_content = report_text.encode('utf-8')
            file_name = f"scenarios_{target_reel.id}_{datetime.now().strftime('%Y%m%d_%H%M')}.txt"
            file_name = re.sub(r'[<>:"/\\|?*]', '_', file_name)
            
            file_obj = BytesIO(file_content)
            file_obj.name = file_name
            
            await status_message.edit_text(
                "‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–∏ –≥–æ—Ç–æ–≤—ã!\nüìÑ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª..."
            )
            
            await callback.message.answer_document(
                document=file_obj,
                caption=f"üé¨ –°—Ü–µ–Ω–∞—Ä–∏–∏ –¥–ª—è Reel –æ—Ç {target_reel.author_username}"
            )
            
            await status_message.edit_text(
                "‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–∏ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã!",
                reply_markup=get_new_analysis_keyboard()
            )
            
        else:  # format_type == "message"
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
            if scenario_result.vision_analysis:
                await callback.message.answer(
                    f"üëÅÔ∏è **–í–ò–ó–£–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó**\n\n{scenario_result.vision_analysis[:3000]}"
                )
            
            if scenario_result.original_scenario:
                await callback.message.answer(
                    f"üéØ **–°–¶–ï–ù–ê–†–ò–ô –û–†–ò–ì–ò–ù–ê–õ–ê**\n\n{scenario_result.original_scenario[:3000]}"
                )
            
            if scenario_result.variant_scenario:
                await callback.message.answer(
                    f"üîÑ **–í–ê–†–ò–ê–¢–ò–í–ù–´–ô –°–¶–ï–ù–ê–†–ò–ô**\n\n{scenario_result.variant_scenario[:3000]}"
                )
            
            if scenario_result.context_scenario:
                await callback.message.answer(
                    f"üíº **–ü–ï–†–°–û–ù–ê–õ–ò–ó–ò–†–û–í–ê–ù–ù–´–ô –°–¶–ï–ù–ê–†–ò–ô**\n\n{scenario_result.context_scenario[:3000]}"
                )
            
            await status_message.edit_text(
                f"‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–∏ –≥–æ—Ç–æ–≤—ã!\n‚è± –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {scenario_result.processing_time_seconds:.1f}—Å",
                reply_markup=get_new_analysis_keyboard()
            )
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"Error in scenario format selection: {e}", exc_info=True)
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤",
            reply_markup=get_new_analysis_keyboard()
        )
        await state.clear()
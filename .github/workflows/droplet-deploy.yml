name: Deploy to DigitalOcean Droplet

permissions:
  contents: read

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

env:
  DROPLET_HOST: ${{ secrets.DROPLET_HOST }}
  DROPLET_USER: ${{ secrets.DROPLET_USER }}
  APP_DIR: "/opt/viralinstabot"

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run tests
      run: |
        python -m pytest tests/ -v || echo "No tests found, skipping..."
    
    - name: Run linting
      run: |
        python -m flake8 src/ || echo "Linting completed with warnings"

  docker-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.DROPLET_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ env.DROPLET_HOST }} >> ~/.ssh/known_hosts 2>/dev/null || true
        
    - name: Test SSH Connection
      run: |
        echo "Testing SSH connection to ${{ env.DROPLET_USER }}@${{ env.DROPLET_HOST }}"
        ssh -o ConnectTimeout=10 -o StrictHostKeyChecking=no ${{ env.DROPLET_USER }}@${{ env.DROPLET_HOST }} "echo 'SSH connection successful' && whoami && pwd" || exit 1
    
    - name: Deploy with Docker Compose
      run: |
        ssh ${{ env.DROPLET_USER }}@${{ env.DROPLET_HOST }} << 'ENDSSH'
          set -e
          
          # Colors for output
          GREEN='\033[0;32m'
          YELLOW='\033[1;33m'
          RED='\033[0;31m'
          NC='\033[0m'
          
          echo -e "${GREEN}üê≥ Starting Docker deployment...${NC}"
          
          # Navigate to app directory
          cd ~/Desktop/2202/Viralinstabot
          
          # Create backup of current containers
          echo -e "${YELLOW}Creating backup...${NC}"
          docker-compose -f docker-compose.prod.yml ps > deployment.backup.$(date +%Y%m%d_%H%M%S) || true
          
          # Pull latest changes
          echo -e "${YELLOW}Pulling latest changes...${NC}"
          git fetch origin
          git reset --hard origin/main
          
          # Stop current containers
          echo -e "${YELLOW}Stopping containers...${NC}"
          docker-compose -f docker-compose.prod.yml down || true
          
          # Build new image
          echo -e "${YELLOW}Building new Docker image...${NC}"
          docker-compose -f docker-compose.prod.yml build bot --no-cache
          
          # Start containers
          echo -e "${YELLOW}Starting containers...${NC}"
          docker-compose -f docker-compose.prod.yml up -d
          
          # Wait for containers to start
          echo -e "${YELLOW}Waiting for containers to start...${NC}"
          sleep 30
          
          # Check container status
          echo -e "${YELLOW}Checking container status...${NC}"
          docker-compose -f docker-compose.prod.yml ps
          
          # Health check for bot container
          if docker-compose -f docker-compose.prod.yml exec -T bot python -c "print('Bot container is healthy')" 2>/dev/null; then
            echo -e "${GREEN}‚úÖ Bot container is healthy${NC}"
          else
            echo -e "${RED}‚ö†Ô∏è Bot container health check failed, checking logs...${NC}"
            docker-compose -f docker-compose.prod.yml logs --tail=20 bot
          fi
          
          # Check if bot container is running
          if docker-compose -f docker-compose.prod.yml ps bot | grep -q "Up"; then
            echo -e "${GREEN}‚úÖ Docker deployment successful!${NC}"
            echo -e "${GREEN}üìä Container status:${NC}"
            docker-compose -f docker-compose.prod.yml ps
          else
            echo -e "${RED}‚ùå Docker deployment failed!${NC}"
            echo -e "${RED}Container logs:${NC}"
            docker-compose -f docker-compose.prod.yml logs bot
            exit 1
          fi
          
          echo -e "${GREEN}üéâ Deployment completed successfully!${NC}"
        ENDSSH
    
    - name: Health Check
      run: |
        ssh ${{ env.DROPLET_USER }}@${{ env.DROPLET_HOST }} << 'ENDSSH'
          cd ~/Desktop/2202/Viralinstabot
          
          # Wait a bit for containers to fully start
          sleep 15
          
          echo "üè• Running health checks..."
          
          # Check container status
          if docker-compose -f docker-compose.prod.yml ps bot | grep -q "Up"; then
            echo "‚úÖ Health check passed - Bot container is running"
            
            # Check recent logs for errors
            if docker-compose -f docker-compose.prod.yml logs --since="2m" bot | grep -i error; then
              echo "‚ö†Ô∏è Warning: Errors found in recent logs"
              docker-compose -f docker-compose.prod.yml logs --tail=10 bot
            else
              echo "‚úÖ No errors in recent logs"
            fi
            
            # Show final status
            echo "üìä Final container status:"
            docker-compose -f docker-compose.prod.yml ps
          else
            echo "‚ùå Health check failed - Bot container is not running"
            docker-compose -f docker-compose.prod.yml ps
            docker-compose -f docker-compose.prod.yml logs --tail=20 bot
            exit 1
          fi
        ENDSSH
    
    - name: Cleanup old backups
      run: |
        ssh ${{ env.DROPLET_USER }}@${{ env.DROPLET_HOST }} << 'ENDSSH'
          cd ~/Desktop/2202/Viralinstabot
          
          # Keep only last 5 deployment backups
          find . -name "deployment.backup.*" -type f | sort -r | tail -n +6 | xargs -r rm -f
          echo "‚úÖ Old deployment backups cleaned up"
        ENDSSH

  notify:
    needs: [docker-deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify deployment result
      run: |
        if [ "${{ needs.docker-deploy.result }}" == "success" ]; then
          echo "‚úÖ Docker deployment to Droplet successful!"
        else
          echo "‚ùå Docker deployment to Droplet failed!"
        fi
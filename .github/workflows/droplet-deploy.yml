name: Deploy to DigitalOcean Droplet

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

env:
  DROPLET_HOST: ${{ secrets.DROPLET_HOST }}
  DROPLET_USER: ${{ secrets.DROPLET_USER }}
  APP_DIR: "/opt/viralinstabot"

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run tests
      run: |
        python -m pytest tests/ -v || echo "No tests found, skipping..."
    
    - name: Run linting
      run: |
        python -m flake8 src/ || echo "Linting completed with warnings"

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.DROPLET_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ env.DROPLET_HOST }} >> ~/.ssh/known_hosts
    
    - name: Deploy to Droplet
      run: |
        ssh ${{ env.DROPLET_USER }}@${{ env.DROPLET_HOST }} << 'ENDSSH'
          set -e
          
          # Colors for output
          GREEN='\033[0;32m'
          YELLOW='\033[1;33m'
          NC='\033[0m'
          
          echo -e "${GREEN}Starting deployment...${NC}"
          
          # Navigate to app directory
          cd ${{ env.APP_DIR }}
          
          # Stop the bot service
          echo -e "${YELLOW}Stopping bot service...${NC}"
          sudo systemctl stop viralinstabot.service || true
          
          # Backup current version
          echo -e "${YELLOW}Creating backup...${NC}"
          sudo -u botuser cp -r ${{ env.APP_DIR }} ${{ env.APP_DIR }}.backup.$(date +%Y%m%d_%H%M%S) || true
          
          # Pull latest changes
          echo -e "${YELLOW}Pulling latest changes...${NC}"
          sudo -u botuser git fetch origin
          sudo -u botuser git reset --hard origin/main
          
          # Update Python dependencies
          echo -e "${YELLOW}Updating dependencies...${NC}"
          sudo -u botuser bash -c "
            source venv/bin/activate
            pip install --upgrade pip
            pip install -r requirements.txt
          "
          
          # Run database migrations if any
          echo -e "${YELLOW}Running migrations...${NC}"
          sudo -u botuser bash -c "
            source venv/bin/activate
            python -c 'from src.storage.sqlite import init_db; init_db()' || echo 'No migrations needed'
          " || true
          
          # Set permissions
          sudo chown -R botuser:botuser ${{ env.APP_DIR }}
          sudo chmod +x ${{ env.APP_DIR }}/*.sh
          
          # Start the bot service
          echo -e "${YELLOW}Starting bot service...${NC}"
          sudo systemctl start viralinstabot.service
          
          # Wait for service to start
          sleep 5
          
          # Check service status
          if sudo systemctl is-active --quiet viralinstabot.service; then
            echo -e "${GREEN}✅ Deployment successful! Bot is running.${NC}"
            sudo systemctl status viralinstabot.service --no-pager -l
          else
            echo -e "\033[0;31m❌ Deployment failed! Service is not running.${NC}"
            sudo journalctl -u viralinstabot.service --no-pager -l -n 20
            exit 1
          fi
          
          echo -e "${GREEN}Deployment completed successfully!${NC}"
        ENDSSH
    
    - name: Health Check
      run: |
        ssh ${{ env.DROPLET_USER }}@${{ env.DROPLET_HOST }} << 'ENDSSH'
          # Wait a bit for the service to fully start
          sleep 10
          
          # Check if service is running
          if sudo systemctl is-active --quiet viralinstabot.service; then
            echo "✅ Health check passed - Service is running"
            
            # Check logs for any immediate errors
            if sudo journalctl -u viralinstabot.service --since "2 minutes ago" | grep -i error; then
              echo "⚠️  Warning: Errors found in recent logs"
              sudo journalctl -u viralinstabot.service --since "2 minutes ago" --no-pager -l
            else
              echo "✅ No errors in recent logs"
            fi
          else
            echo "❌ Health check failed - Service is not running"
            sudo systemctl status viralinstabot.service --no-pager -l
            exit 1
          fi
        ENDSSH
    
    - name: Cleanup old backups
      run: |
        ssh ${{ env.DROPLET_USER }}@${{ env.DROPLET_HOST }} << 'ENDSSH'
          # Keep only last 5 backups
          find /opt -name "viralinstabot.backup.*" -type d | sort -r | tail -n +6 | xargs -r rm -rf
          echo "✅ Old backups cleaned up"
        ENDSSH

  docker-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event.inputs.environment == 'production'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.DROPLET_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ env.DROPLET_HOST }} >> ~/.ssh/known_hosts
    
    - name: Deploy with Docker Compose
      run: |
        ssh ${{ env.DROPLET_USER }}@${{ env.DROPLET_HOST }} << 'ENDSSH'
          set -e
          
          cd ${{ env.APP_DIR }}
          
          echo "🐳 Deploying with Docker Compose..."
          
          # Pull latest changes
          sudo -u botuser git pull origin main
          
          # Build and deploy
          sudo docker-compose -f docker-compose.prod.yml down || true
          sudo docker-compose -f docker-compose.prod.yml build --no-cache
          sudo docker-compose -f docker-compose.prod.yml up -d
          
          # Wait for containers to start
          sleep 15
          
          # Check container status
          sudo docker-compose -f docker-compose.prod.yml ps
          
          # Health check
          if sudo docker-compose -f docker-compose.prod.yml exec -T bot python -c "print('Bot container is healthy')"; then
            echo "✅ Docker deployment successful!"
          else
            echo "❌ Docker deployment failed!"
            sudo docker-compose -f docker-compose.prod.yml logs bot
            exit 1
          fi
        ENDSSH

  notify:
    needs: [deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify deployment result
      run: |
        if [ "${{ needs.deploy.result }}" == "success" ]; then
          echo "✅ Deployment to Droplet successful!"
        else
          echo "❌ Deployment to Droplet failed!"
        fi